package dmitriy.blanutsa.coursework.security;import dmitriy.blanutsa.coursework.persistance.models.Person;import dmitriy.blanutsa.coursework.persistance.models.enums.UserRoles;import dmitriy.blanutsa.coursework.persistance.repositories.PersonRepository;import org.springframework.security.core.GrantedAuthority;import org.springframework.security.core.authority.SimpleGrantedAuthority;import org.springframework.security.core.userdetails.User;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.core.userdetails.UsernameNotFoundException;import org.springframework.stereotype.Component;import javax.transaction.Transactional;import java.util.HashSet;import java.util.Set;@Component("customUserDetailsService")public class UserDetailsServiceImpl implements UserDetailsService {    private PersonRepository personRepository;    public UserDetailsServiceImpl(PersonRepository personRepository) {        this.personRepository = personRepository;    }    @Override    @Transactional    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {        Person person = personRepository.findByLogin(username);        Set<GrantedAuthority> grantedAuthorities = new HashSet<>();        for (UserRoles role : person.getRoles()){            grantedAuthorities.add(new SimpleGrantedAuthority(role.name()));        }        return new User(person.getLogin(), person.getPassword(), grantedAuthorities);    }}