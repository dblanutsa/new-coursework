package dmitriy.blanutsa.coursework.services.impl;import dmitriy.blanutsa.coursework.controllers.dto.AttorneyPowerRequest;import dmitriy.blanutsa.coursework.persistance.models.AttorneyPower;import dmitriy.blanutsa.coursework.persistance.models.Car;import dmitriy.blanutsa.coursework.persistance.models.Person;import dmitriy.blanutsa.coursework.persistance.repositories.AttorneyPowerRepository;import dmitriy.blanutsa.coursework.persistance.repositories.CarRepository;import dmitriy.blanutsa.coursework.persistance.repositories.PersonRepository;import dmitriy.blanutsa.coursework.services.AttorneyPowerService;import dmitriy.blanutsa.coursework.services.CarService;import dmitriy.blanutsa.coursework.services.UserService;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.security.core.userdetails.User;import org.springframework.stereotype.Service;import org.springframework.ui.Model;import org.springframework.validation.BindingResult;import javax.transaction.Transactional;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Date;@Servicepublic class AttorneyPowerServiceImpl implements AttorneyPowerService {    private final AttorneyPowerRepository repository;    private final PersonRepository personRepository;    private final CarService carService;    private final UserService userService;    private final CarRepository carRepository;    public AttorneyPowerServiceImpl(AttorneyPowerRepository repository, PersonRepository personRepository, CarService carService, UserService userService, CarRepository carRepository) {        this.repository = repository;        this.personRepository = personRepository;        this.carService = carService;        this.userService = userService;        this.carRepository = carRepository;    }    @Override    public String getList(Model model) {        User principal = (User) SecurityContextHolder.getContext().getAuthentication().getPrincipal();        Person byLogin = personRepository.findByLogin(principal.getUsername());        model.addAttribute("attorneyPowers", repository.findListByPersonId(byLogin.getId()));        return "attorneyPowers";    }    @Override    @Transactional    public String add(AttorneyPowerRequest request, BindingResult result, Model model) {        model.addAttribute("persons", userService.getListWithoutCurrent());        model.addAttribute("cars", carService.getCurrentCars());        if (result.hasErrors()) {            return "addAttorneyPower";        }        Date from = parsDate(request.getDateFrom());        if (from == null) {            result.rejectValue("dateFrom", "error.attorneyPower", "Wrong date format!!!");            return "addAttorneyPower";        }        if (from.compareTo(new Date()) < 0) {            result.rejectValue("dateFrom", "error.attorneyPower", "Wrong from date!!!");            return "addAttorneyPower";        }        Date to = parsDate(request.getDateTo());        if (to == null) {            result.rejectValue("dateTo", "error.attorneyPower", "Wrong date format!!!");            return "addAttorneyPower";        }        if (from.compareTo(to) > 0) {            result.rejectValue("dateTo", "error.attorneyPower", "From date > to date!!!");            return "addAttorneyPower";        }        AttorneyPower attorneyPower = new AttorneyPower();        attorneyPower.setDateFrom(from);        attorneyPower.setDateTo(to);        Car car = carRepository.findById(request.getCarId()).get();        attorneyPower.setCar(car);        attorneyPower.setCarId(car.getId());        Person person = personRepository.findById(request.getPersonId()).get();        attorneyPower.setPerson(person);        attorneyPower.setPersonId(person.getId());        repository.save(attorneyPower);        return "redirect:/attorneyPowers";    }    private Date parsDate(String strDate) {        try {            return new SimpleDateFormat("yyyy/MM/dd").parse(strDate);        } catch (ParseException e) {           return null;        }    }}