package dmitriy.blanutsa.coursework.services.impl;import dmitriy.blanutsa.coursework.controllers.dto.CarRequest;import dmitriy.blanutsa.coursework.persistance.models.Car;import dmitriy.blanutsa.coursework.persistance.models.Person;import dmitriy.blanutsa.coursework.persistance.repositories.CarRepository;import dmitriy.blanutsa.coursework.persistance.repositories.ModelRepository;import dmitriy.blanutsa.coursework.persistance.repositories.PersonRepository;import dmitriy.blanutsa.coursework.services.CarService;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.security.core.userdetails.User;import org.springframework.stereotype.Service;import org.springframework.ui.Model;import org.springframework.validation.BindingResult;import javax.transaction.Transactional;import java.util.List;@Servicepublic class CarServiceImpl implements CarService {    private final CarRepository carRepository;    private final ModelRepository modelRepository;    private final PersonRepository personRepository;    public CarServiceImpl(CarRepository carRepository, ModelRepository modelRepository, PersonRepository personRepository) {        this.carRepository = carRepository;        this.modelRepository = modelRepository;        this.personRepository = personRepository;    }    @Override    public String getList(Model model) {        model.addAttribute("cars", getCurrentCars());        return "cars";    }    @Override    @Transactional    public String add(CarRequest request, BindingResult result, Model model) {        model.addAttribute("models", modelRepository.findAll());        if (result.hasErrors()) {            return "addCar";        }        if (carRepository.findByNumber(request.getNumber()) != null) {            result.rejectValue("number", "error.car", "Car with this number already exists!!!");            return "addCar";        }        Car car = new Car();        car.setNumber(request.getNumber());        User principal = (User) SecurityContextHolder.getContext().getAuthentication().getPrincipal();        Person byLogin = personRepository.findByLogin(principal.getUsername());        car.setOwner(byLogin);        car.setOwnerId(byLogin.getId());        dmitriy.blanutsa.coursework.persistance.models.Model model1 = modelRepository.findById(request.getModelId()).get();        car.setModel(model1);        car.setModelId(model1.getId());        carRepository.save(car);        return "redirect:/cars";    }    @Override    public List<Car> getCurrentCars() {        User principal = (User) SecurityContextHolder.getContext().getAuthentication().getPrincipal();        Person byLogin = personRepository.findByLogin(principal.getUsername());        return carRepository.findAllByOwnerId(byLogin.getId());    }    @Override    public void setModelCreateObject(Model model) {        model.addAttribute("car", new Car());        model.addAttribute("models", modelRepository.findAll());    }}