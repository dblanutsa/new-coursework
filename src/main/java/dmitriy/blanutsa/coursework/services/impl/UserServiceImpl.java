package dmitriy.blanutsa.coursework.services.impl;import dmitriy.blanutsa.coursework.controllers.dto.ProfileDTO;import dmitriy.blanutsa.coursework.controllers.dto.RegisterRequest;import dmitriy.blanutsa.coursework.controllers.dto.ResetPasswordRequest;import dmitriy.blanutsa.coursework.persistance.models.Person;import dmitriy.blanutsa.coursework.persistance.repositories.PersonRepository;import dmitriy.blanutsa.coursework.services.UserService;import org.springframework.security.core.Authentication;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.security.core.userdetails.User;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.stereotype.Service;import org.springframework.validation.BindingResult;import javax.transaction.Transactional;import java.util.List;@Servicepublic class UserServiceImpl implements UserService {    private final PersonRepository personRepository;    private final PasswordEncoder passwordEncoder;    public UserServiceImpl(PersonRepository personRepository, PasswordEncoder passwordEncoder) {        this.personRepository = personRepository;        this.passwordEncoder = passwordEncoder;    }    @Override    @Transactional    public String register(RegisterRequest request, BindingResult result) {        if (result.hasErrors()) {            return "register";        }        if (personRepository.findByLogin(request.getLogin()) != null) {            result.rejectValue("login", "error.register", "User with this login already exists!!!");            return "register";        }        request.setPassword(passwordEncoder.encode(request.getPassword()));        personRepository.save(request.toPerson());        return "login";    }    @Override    public ProfileDTO getProfile() {        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();        return ProfileDTO.fromPerson(personRepository.findByLogin(((User) authentication.getPrincipal()).getUsername()));    }    @Override    @Transactional    public String changeProfile(ProfileDTO profileDTO, BindingResult result) {        if (result.hasErrors()) {            return "profile";        }        Person byLogin = personRepository.findByLogin(profileDTO.getLogin());        byLogin.setFirstName(profileDTO.getFirstName());        byLogin.setLastName(profileDTO.getLastName());        return "profile";    }    @Override    @Transactional    public String resetPassword(ResetPasswordRequest request, BindingResult result) {        if (result.hasErrors()) {            return "resetPassword";        }        User principal = (User) SecurityContextHolder.getContext().getAuthentication().getPrincipal();        Person byLogin = personRepository.findByLogin(principal.getUsername());        if (!passwordEncoder.matches(request.getCurrentPassword(), byLogin.getPassword())) {            result.rejectValue("currentPassword", "error.resetPassword", "Current password is wrong!!!");            return "resetPassword";        }        if (request.getCurrentPassword().equals(request.getNewPassword())) {            result.rejectValue("newPassword", "error.newPassword", "New password is the same!!!");            return "resetPassword";        }        byLogin.setPassword(passwordEncoder.encode(request.getNewPassword()));        return "redirect:/logout";    }    @Override    public List<Person> getListWithoutCurrent() {        User principal = (User) SecurityContextHolder.getContext().getAuthentication().getPrincipal();        return personRepository.getAllWithoutOne(principal.getUsername());    }}